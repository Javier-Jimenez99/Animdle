# Generated by Django 4.2.4 on 2023-08-28 23:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AnimdleUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "user_browser_id",
                    models.CharField(
                        default="", max_length=100, verbose_name="User Browser ID"
                    ),
                ),
                ("last_login", models.DateTimeField(auto_now_add=True)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Anime",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("rank", models.IntegerField()),
                ("title", models.CharField(max_length=100)),
                ("popularity_score", models.FloatField()),
                ("quality_score", models.FloatField()),
                ("year", models.IntegerField()),
                ("season", models.CharField(max_length=100)),
                ("synopsis", models.TextField()),
                ("synonyms", models.CharField(max_length=100)),
                ("image_url", models.CharField(max_length=100)),
                ("hardcore", models.BooleanField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Day",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("date", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=100)),
                ("spoiler", models.BooleanField()),
                ("nsfw", models.BooleanField()),
                ("video_url", models.CharField(max_length=100)),
                ("video_resolution", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "anime",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.anime"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("won", models.BooleanField()),
                ("attempts", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "day",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.day"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="day",
            name="easy_ending",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="easy_ending",
                to="api.theme",
            ),
        ),
        migrations.AddField(
            model_name="day",
            name="easy_opening",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="easy_opening",
                to="api.theme",
            ),
        ),
        migrations.AddField(
            model_name="day",
            name="hardcore_ending",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.theme"
            ),
        ),
        migrations.AddField(
            model_name="day",
            name="hardcore_opening",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="hardcore_opening",
                to="api.theme",
            ),
        ),
    ]
